<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: validate/validate.proto

namespace ProtocGenValidate\Validate;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * RepeatedRules describe the constraints applied to `repeated` values
 *
 * Generated from protobuf message <code>validate.RepeatedRules</code>
 */
class RepeatedRules extends \Google\Protobuf\Internal\Message
{
    /**
     * MinItems specifies that this field must have the specified number of
     * items at a minimum
     *
     * Generated from protobuf field <code>uint64 min_items = 1;</code>
     */
    protected $min_items = 0;
    /**
     * MaxItems specifies that this field must have the specified number of
     * items at a maximum
     *
     * Generated from protobuf field <code>uint64 max_items = 2;</code>
     */
    protected $max_items = 0;
    /**
     * Unique specifies that all elements in this field must be unique. This
     * contraint is only applicable to scalar and enum types (messages are not
     * supported).
     *
     * Generated from protobuf field <code>bool unique = 3;</code>
     */
    protected $unique = false;
    /**
     * Items specifies the contraints to be applied to each item in the field.
     * Repeated message fields will still execute validation against each item
     * unless skip is specified here.
     *
     * Generated from protobuf field <code>.validate.FieldRules items = 4;</code>
     */
    protected $items = null;
    /**
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     *
     * Generated from protobuf field <code>bool ignore_empty = 5;</code>
     */
    protected $ignore_empty = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $min_items
     *           MinItems specifies that this field must have the specified number of
     *           items at a minimum
     *     @type int|string $max_items
     *           MaxItems specifies that this field must have the specified number of
     *           items at a maximum
     *     @type bool $unique
     *           Unique specifies that all elements in this field must be unique. This
     *           contraint is only applicable to scalar and enum types (messages are not
     *           supported).
     *     @type \ProtocGenValidate\Validate\FieldRules $items
     *           Items specifies the contraints to be applied to each item in the field.
     *           Repeated message fields will still execute validation against each item
     *           unless skip is specified here.
     *     @type bool $ignore_empty
     *           IgnoreEmpty specifies that the validation rules of this field should be
     *           evaluated only if the field is not empty
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ProtocGenValidate\GPBValidate\Validate::initOnce();
        parent::__construct($data);
    }

    /**
     * MinItems specifies that this field must have the specified number of
     * items at a minimum
     *
     * Generated from protobuf field <code>uint64 min_items = 1;</code>
     * @return int|string
     */
    public function getMinItems()
    {
        return $this->min_items;
    }

    /**
     * MinItems specifies that this field must have the specified number of
     * items at a minimum
     *
     * Generated from protobuf field <code>uint64 min_items = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinItems($var)
    {
        GPBUtil::checkUint64($var);
        $this->min_items = $var;

        return $this;
    }

    /**
     * MaxItems specifies that this field must have the specified number of
     * items at a maximum
     *
     * Generated from protobuf field <code>uint64 max_items = 2;</code>
     * @return int|string
     */
    public function getMaxItems()
    {
        return $this->max_items;
    }

    /**
     * MaxItems specifies that this field must have the specified number of
     * items at a maximum
     *
     * Generated from protobuf field <code>uint64 max_items = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxItems($var)
    {
        GPBUtil::checkUint64($var);
        $this->max_items = $var;

        return $this;
    }

    /**
     * Unique specifies that all elements in this field must be unique. This
     * contraint is only applicable to scalar and enum types (messages are not
     * supported).
     *
     * Generated from protobuf field <code>bool unique = 3;</code>
     * @return bool
     */
    public function getUnique()
    {
        return $this->unique;
    }

    /**
     * Unique specifies that all elements in this field must be unique. This
     * contraint is only applicable to scalar and enum types (messages are not
     * supported).
     *
     * Generated from protobuf field <code>bool unique = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setUnique($var)
    {
        GPBUtil::checkBool($var);
        $this->unique = $var;

        return $this;
    }

    /**
     * Items specifies the contraints to be applied to each item in the field.
     * Repeated message fields will still execute validation against each item
     * unless skip is specified here.
     *
     * Generated from protobuf field <code>.validate.FieldRules items = 4;</code>
     * @return \ProtocGenValidate\Validate\FieldRules
     */
    public function getItems()
    {
        return isset($this->items) ? $this->items : null;
    }

    public function hasItems()
    {
        return isset($this->items);
    }

    public function clearItems()
    {
        unset($this->items);
    }

    /**
     * Items specifies the contraints to be applied to each item in the field.
     * Repeated message fields will still execute validation against each item
     * unless skip is specified here.
     *
     * Generated from protobuf field <code>.validate.FieldRules items = 4;</code>
     * @param \ProtocGenValidate\Validate\FieldRules $var
     * @return $this
     */
    public function setItems($var)
    {
        GPBUtil::checkMessage($var, \ProtocGenValidate\Validate\FieldRules::class);
        $this->items = $var;

        return $this;
    }

    /**
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     *
     * Generated from protobuf field <code>bool ignore_empty = 5;</code>
     * @return bool
     */
    public function getIgnoreEmpty()
    {
        return $this->ignore_empty;
    }

    /**
     * IgnoreEmpty specifies that the validation rules of this field should be
     * evaluated only if the field is not empty
     *
     * Generated from protobuf field <code>bool ignore_empty = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreEmpty($var)
    {
        GPBUtil::checkBool($var);
        $this->ignore_empty = $var;

        return $this;
    }

}

